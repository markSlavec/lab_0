1.Какие структуры данных используются в Numpy? В чем их отличие от списков Python?

Основная структура данных в Numpy — это ndarray (многомерный массив).
ndarray отличается от списков Python тем, что хранит данные одного типа, занимает непрерывный участок памяти
и поддерживает быстрые векторные операции, что делает его более производительным
 и эффективным для вычислений по сравнению со списками Python.

2. Какие функции для генерации массивов использует Numpy?

Numpy предоставляет функции для генерации массивов, такие как np.array
(создает массив из списка), np.zeros, np.ones (создают массивы, заполненные нулями или единицами),
np.arange (создает массив чисел с заданным шагом), np.linspace (создает массив из чисел в
заданном диапазоне), np.random (генерация случайных массивов), и np.eye (единичная матрица).

3. Какие способы предлагает Numpy для извлечения данных из массивов?

Numpy поддерживает индексацию (по позициям), срезы (с использованием :), логическую индексацию
(по условию) и использование методов, таких как np.take, np.choose и np.extract.

4. Что такое векторизация кода и почему это ускоряет работу программ?

Векторизация — это процесс преобразования операций над массивами так,
чтобы они выполнялись за один вызов, используя низкоуровневые
оптимизированные функции Numpy. Это ускоряет работу, поскольку такие операции
избегают циклов Python, которые медленны, и выполняются на уровне компиляции C.

5. Какие виды матричных операций реализованы в Numpy?

Numpy поддерживает сложение, вычитание, умножение и деление матриц,
скалярное умножение, поэлементные операции, транспонирование, матричное
умножение (np.dot), инверсию матрицы (np.linalg.inv), вычисление детерминанта
(np.linalg.det) и операцию свертки.

6. Какие функции используются для преобразования формы, размера и соединения массивов?

Функции преобразования формы включают np.reshape, np.ravel (выравнивание), np.flatten,
np.resize, np.transpose. Для объединения массивов используются np.concatenate, np.vstack,
np.hstack, np.column_stack, np.row_stack.

7. Какие две главные структуры данных используются в pandas? В чем их отличие?

Основные структуры данных в pandas — это Series и DataFrame. Series — это одномерный
массив с индексами, аналогичный столбцу данных, а DataFrame — это двумерная таблица данных,
которая может содержать данные разного типа в разных столбцах.

8.Как происходит объединение двух таблиц в pandas?

Для объединения таблиц в pandas используются функции pd.concat (для объединения по
строкам или столбцам), pd.merge и pd.join (для объединения по ключевым столбцам или индексам,
аналогично SQL-соединениям).

9. Зачем нужны и как работают индексы в pandas?

Индексы позволяют однозначно идентифицировать строки или столбцы в таблице, обеспечивая
удобство доступа и поиска. Индексы могут быть числовыми, строковыми или многоуровневыми,
что облегчает сложные выборки, группировки и сортировки данных.

10. Построение каких основных видов графиков используется при анализе данных в машинном обучении?

При анализе данных часто используют линейные графики, гистограммы, круговые диаграммы,
ящик с усами (boxplot), диаграммы рассеяния (scatter plot), тепловые карты и линейные тренды.

11. В чём разница между библиотеками matplotlib и seaborn? Каковы преимущества каждой из них?

matplotlib — базовая библиотека для построения графиков с высокой степенью кастомизации.
seaborn построен поверх matplotlib, он предоставляет более высокоуровневый API, предустановленные
стили и цветовые палитры, упрощая создание сложных визуализаций. matplotlib дает
большую гибкость, а seaborn предлагает удобство и стиль для визуализации данных.

12. Как задать размер графика в matplotlib?

Размер графика задается параметром figsize при создании фигуры, например:
plt.figure(figsize=(width, height)).
13. Как установить стили в seaborn?

В seaborn можно установить стили с помощью функции sns.set_style(),
например: sns.set_style("whitegrid"). Доступные стили: "white", "dark", "whitegrid", "darkgrid" и "ticks".

14. Для чего используют подграфики subplots?
Подграфики (subplots) используются для размещения нескольких графиков на одной
 фигуре, что позволяет визуализировать различные аспекты данных в одном окне.
В matplotlib это делается с помощью plt.subplots().

15. Какие основные типы графиков реализованы в matplotlib? Что изображается на ящиковой диаграмме?

Основные типы графиков в matplotlib включают линейные графики, гистограммы, круговые диаграммы,
диаграммы рассеяния, столбчатые диаграммы, ящиковые диаграммы и тепловые карты.
Ящиковая диаграмма (boxplot) визуализирует распределение данных, показывая медиану,
квартили и возможные выбросы.

16. Как поменять палитру цветов у тепловой карты?
В seaborn для изменения палитры цветов тепловой карты используется параметр
cmap в функции sns.heatmap(). Этот параметр позволяет задать цветовую схему для значений на карте.
Пример:
 # Пример данных
data = np.random.rand(10, 10)

# Тепловая карта с разной палитрой
plt.figure(figsize=(8, 6))
sns.heatmap(data, cmap="viridis")  # Можно использовать палитры "viridis", "coolwarm", "Blues", "YlGnBu" и др.
plt.show()


17. Какие типы операций поддерживает numpy для работы с массивами?
numpy поддерживает множество операций, таких как поэлементные арифметические операции
(сложение, вычитание, умножение и деление), булевы операции, логические операции,
операции над матрицами (умножение, транспонирование), вычисление статистических параметров
(среднее, медиана, стандартное отклонение), агрегирование, а также различные специализированные
функции (np.sin, np.log, np.exp и другие).


18. Какие параметры можно использовать для настройки heatmap в seaborn?
В seaborn.heatmap() можно настроить:
cmap: цветовая палитра (например, "viridis", "coolwarm", "Blues").
annot: добавление числовых значений на карту.
linewidths и linecolor: толщина и цвет линий между ячейками.
vmin и vmax: минимальное и максимальное значение для цветовой шкалы.
xticklabels и yticklabels: метки по осям.
cbar_kws: параметры для настройки цветовой полосы.


19. Как работать с пропущенными значениями в pandas?
В pandas для работы с пропущенными значениями (NaN) используются:
df.isna() или df.isnull(): проверка наличия NaN.
df.dropna(): удаление строк или столбцов с NaN.
df.fillna(): замена NaN на заданное значение (например, среднее).
df.interpolate(): линейное или полиномиальное заполнение NaN.


20 . Как выбрать строки и столбцы в pandas по условию?
Выбор по условию выполняется с помощью df.loc[condition].
Также можно использовать методы query() или isin() для более сложных условий.





